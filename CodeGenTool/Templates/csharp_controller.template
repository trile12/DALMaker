using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using YourNamespace.Services;
using YourNamespace.Dtos;

namespace YourNamespace.Controllers
{
    [ApiController]
    [Route("api/[@dbTable2net]")]
    public class @dbTable2netUpperController : ControllerBase
    {
        private readonly I@dbTable2netUpperService _service;
        private readonly ILogger<@dbTable2netUpperController> _logger;

        public @dbTable2netUpperController(I@dbTable2netUpperService service, ILogger<@dbTable2netUpperController> logger)
        {
            _service = service;
            _logger = logger;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<@dbTable2netUpperDto>>> GetAll()
        {
            try
            {
                var items = await _service.GetAllAsync();
                return Ok(items);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting all @dbTable2net");
                return StatusCode(500, "Internal server error");
            }
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<@dbTable2netUpperDto>> GetById(@foreachPK @dbType2net id)
        {
            try
            {
                var item = await _service.GetByIdAsync(id);
                if (item == null)
                {
                    return NotFound();
                }
                return Ok(item);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting @dbTable2net with id {Id}", id);
                return StatusCode(500, "Internal server error");
            }
        }

        [HttpPost]
        public async Task<ActionResult<@dbTable2netUpperDto>> Create(@dbTable2netUpperDto dto)
        {
            try
            {
                var created = await _service.CreateAsync(dto);
                return CreatedAtAction(nameof(GetById), new { id = @foreachPK created.@dbColmnName2netUpper }, created);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating @dbTable2net");
                return StatusCode(500, "Internal server error");
            }
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> Update(@foreachPK @dbType2net id, @dbTable2netUpperDto dto)
        {
            if (@foreachPK id != dto.@dbColmnName2netUpper)
            {
                return BadRequest("ID mismatch");
            }

            try
            {
                var updated = await _service.UpdateAsync(dto);
                if (!updated)
                {
                    return NotFound();
                }
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating @dbTable2net with id {Id}", id);
                return StatusCode(500, "Internal server error");
            }
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(@foreachPK @dbType2net id)
        {
            try
            {
                var deleted = await _service.DeleteAsync(id);
                if (!deleted)
                {
                    return NotFound();
                }
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting @dbTable2net with id {Id}", id);
                return StatusCode(500, "Internal server error");
            }
        }
    }
}